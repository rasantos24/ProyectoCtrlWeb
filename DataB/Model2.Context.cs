//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CtrlWebT.DataB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Ctrl_TestEntities : DbContext
    {
        public Ctrl_TestEntities()
            : base("name=Ctrl_TestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<apConfig> apConfigs { get; set; }
        public virtual DbSet<apFormaPago> apFormaPagoes { get; set; }
        public virtual DbSet<apProveedore> apProveedores { get; set; }
        public virtual DbSet<apProveedoresContacto> apProveedoresContactos { get; set; }
        public virtual DbSet<apProveedoresTipo> apProveedoresTipoes { get; set; }
        public virtual DbSet<arCliente> arClientes { get; set; }
        public virtual DbSet<arClientesClase> arClientesClases { get; set; }
        public virtual DbSet<arClientesContacto> arClientesContactos { get; set; }
        public virtual DbSet<arClientesDocumento> arClientesDocumentos { get; set; }
        public virtual DbSet<arClientesTipo> arClientesTipoes { get; set; }
        public virtual DbSet<arConfig> arConfigs { get; set; }
        public virtual DbSet<arCredito> arCreditos { get; set; }
        public virtual DbSet<arCreditosDetalle> arCreditosDetalles { get; set; }
        public virtual DbSet<arDebito> arDebitos { get; set; }
        public virtual DbSet<arDescuento> arDescuentos { get; set; }
        public virtual DbSet<arFactura> arFacturas { get; set; }
        public virtual DbSet<arFacturasDescuento> arFacturasDescuentoes { get; set; }
        public virtual DbSet<arFacturasDetalle> arFacturasDetalles { get; set; }
        public virtual DbSet<arFacturasTax> arFacturasTaxes { get; set; }
        public virtual DbSet<arMetodoPago> arMetodoPagoes { get; set; }
        public virtual DbSet<arNotaCreditoTipo> arNotaCreditoTipoes { get; set; }
        public virtual DbSet<arNotaDebitoTipo> arNotaDebitoTipoes { get; set; }
        public virtual DbSet<arRecibo> arRecibos { get; set; }
        public virtual DbSet<arRecibosDetalle> arRecibosDetalles { get; set; }
        public virtual DbSet<arRecibosMetodo> arRecibosMetodos { get; set; }
        public virtual DbSet<arServicioClase> arServicioClases { get; set; }
        public virtual DbSet<arServicio> arServicios { get; set; }
        public virtual DbSet<arServicioTipo> arServicioTipoes { get; set; }
        public virtual DbSet<arTerminoCredito> arTerminoCreditoes { get; set; }
        public virtual DbSet<bnBanco> bnBancos { get; set; }
        public virtual DbSet<bnConfig> bnConfigs { get; set; }
        public virtual DbSet<bnMoneda> bnMonedas { get; set; }
        public virtual DbSet<gcCodigosDeduccion> gcCodigosDeduccions { get; set; }
        public virtual DbSet<gcConfig> gcConfigs { get; set; }
        public virtual DbSet<gcOrdenPago> gcOrdenPagoes { get; set; }
        public virtual DbSet<gcOrdenPagoDed> gcOrdenPagoDeds { get; set; }
        public virtual DbSet<gcPrestamo> gcPrestamos { get; set; }
        public virtual DbSet<gcPrestamosAmor> gcPrestamosAmors { get; set; }
        public virtual DbSet<gcPrestamosAmorMov> gcPrestamosAmorMovs { get; set; }
        public virtual DbSet<gcPrestamosAmorMovDet> gcPrestamosAmorMovDets { get; set; }
        public virtual DbSet<gcPrestamosAvale> gcPrestamosAvales { get; set; }
        public virtual DbSet<gcPrestamosDoc> gcPrestamosDocs { get; set; }
        public virtual DbSet<gcPrestamosGar> gcPrestamosGars { get; set; }
        public virtual DbSet<gcPrestamosRefCom> gcPrestamosRefComs { get; set; }
        public virtual DbSet<gcPrestamosRefFin> gcPrestamosRefFins { get; set; }
        public virtual DbSet<gcPrestamosRefPer> gcPrestamosRefPers { get; set; }
        public virtual DbSet<gcPrestamosReq> gcPrestamosReqs { get; set; }
        public virtual DbSet<gcPrestamosTipo> gcPrestamosTipoes { get; set; }
        public virtual DbSet<gcPrestamosTipoDoc> gcPrestamosTipoDocs { get; set; }
        public virtual DbSet<gcPrestamosTipoReq> gcPrestamosTipoReqs { get; set; }
        public virtual DbSet<gcRequisitosPrestamo> gcRequisitosPrestamos { get; set; }
        public virtual DbSet<gcTiposGarantia> gcTiposGarantias { get; set; }
        public virtual DbSet<glCuenta> glCuentas { get; set; }
        public virtual DbSet<glCuentasCategoria> glCuentasCategorias { get; set; }
        public virtual DbSet<glCuentasGrupo> glCuentasGrupoes { get; set; }
        public virtual DbSet<glCuentasSubGrupo> glCuentasSubGrupoes { get; set; }
        public virtual DbSet<icAjusteClase> icAjusteClases { get; set; }
        public virtual DbSet<icAjuste> icAjustes { get; set; }
        public virtual DbSet<icAjustesDetalle> icAjustesDetalles { get; set; }
        public virtual DbSet<icAlmacene> icAlmacenes { get; set; }
        public virtual DbSet<icBine> icBines { get; set; }
        public virtual DbSet<icClasificacion> icClasificacions { get; set; }
        public virtual DbSet<icConfig> icConfigs { get; set; }
        public virtual DbSet<icDepto> icDeptos { get; set; }
        public virtual DbSet<icFabricante> icFabricantes { get; set; }
        public virtual DbSet<icGrupo> icGrupoes { get; set; }
        public virtual DbSet<icInventarioFisico> icInventarioFisicoes { get; set; }
        public virtual DbSet<icInventarioFisicoDetalle> icInventarioFisicoDetalles { get; set; }
        public virtual DbSet<icLinea> icLineas { get; set; }
        public virtual DbSet<icMiscelaneo> icMiscelaneos { get; set; }
        public virtual DbSet<icPresentacion> icPresentacions { get; set; }
        public virtual DbSet<icProducto> icProductos { get; set; }
        public virtual DbSet<icProductosBitacora> icProductosBitacoras { get; set; }
        public virtual DbSet<icProductosEspMiscelaneo> icProductosEspMiscelaneos { get; set; }
        public virtual DbSet<icProductosInventario> icProductosInventarios { get; set; }
        public virtual DbSet<icRecepcione> icRecepciones { get; set; }
        public virtual DbSet<icRecepcionesDetalle> icRecepcionesDetalles { get; set; }
        public virtual DbSet<icRequisicionClase> icRequisicionClases { get; set; }
        public virtual DbSet<icRequisicionesSalida> icRequisicionesSalidas { get; set; }
        public virtual DbSet<icRequisicionesSalidaDetalle> icRequisicionesSalidaDetalles { get; set; }
        public virtual DbSet<icRequisicionesTransf> icRequisicionesTransfs { get; set; }
        public virtual DbSet<icRequisicionesTransfDetalle> icRequisicionesTransfDetalles { get; set; }
        public virtual DbSet<icTipoInventario> icTipoInventarios { get; set; }
        public virtual DbSet<icTipoInventarioCtasCosto> icTipoInventarioCtasCostos { get; set; }
        public virtual DbSet<icTipoInventarioCtasIngreso> icTipoInventarioCtasIngresos { get; set; }
        public virtual DbSet<icTipoMiscelaneo> icTipoMiscelaneos { get; set; }
        public virtual DbSet<icUnidadMedida> icUnidadMedidas { get; set; }
        public virtual DbSet<posCategoria> posCategorias { get; set; }
        public virtual DbSet<posCategoriasModi> posCategoriasModis { get; set; }
        public virtual DbSet<posCategoriasProducto> posCategoriasProductos { get; set; }
        public virtual DbSet<posConfig> posConfigs { get; set; }
        public virtual DbSet<posOrdene> posOrdenes { get; set; }
        public virtual DbSet<posOrdenesDetalle> posOrdenesDetalles { get; set; }
        public virtual DbSet<posTurno> posTurnos { get; set; }
        public virtual DbSet<posTurnosTabla> posTurnosTablas { get; set; }
        public virtual DbSet<posVendedore> posVendedores { get; set; }
        public virtual DbSet<SysCAI> SysCAIs { get; set; }
        public virtual DbSet<SysCAITerminale> SysCAITerminales { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SysRutaProceso> SysRutaProcesos { get; set; }
        public virtual DbSet<SysRutaProcesosDet> SysRutaProcesosDets { get; set; }
        public virtual DbSet<SysRutaProcesosWF> SysRutaProcesosWFs { get; set; }
        public virtual DbSet<SysSucursale> SysSucursales { get; set; }
        public virtual DbSet<SysTax> SysTaxes { get; set; }
        public virtual DbSet<SysTerminale> SysTerminales { get; set; }
        public virtual DbSet<SysTiposDocumento> SysTiposDocumentos { get; set; }
        public virtual DbSet<viewDeptosCuentasCosto> viewDeptosCuentasCostos { get; set; }
        public virtual DbSet<viewDeptosCuentasIngreso> viewDeptosCuentasIngresos { get; set; }
        public virtual DbSet<viewMiscelaneo> viewMiscelaneos { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_arFacturaTax(Nullable<int> noFactura)
        {
            var noFacturaParameter = noFactura.HasValue ?
                new ObjectParameter("NoFactura", noFactura) :
                new ObjectParameter("NoFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_arFacturaTax", noFacturaParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
